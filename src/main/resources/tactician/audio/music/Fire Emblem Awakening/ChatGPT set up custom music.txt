You said:
I am making a Slay the Spire mod. I have an OGG file with loop points (LOOP_START, LOOP_END, LOOP_LENGTH) and have used a SpirePatch to have a specific OGG file play over the menu music. The audio file plays fine, but the track loops back to the beginning of the song rather than at the loop point. How can I make the track loop with the loop point?
ChatGPT said:

In Slay the Spire, music playback is handled using libGDX, a popular Java game framework. Unfortunately, libGDX's default music playback using Music does not support OGG loop points (like LOOP_START, LOOP_END, LOOP_LENGTH) out of the box. This means that although your .ogg file may contain loop metadata, libGDX ignores it and just loops the entire file.

To fix this, you'll need to implement manual looping logic using a patch. Here's how you can go about it:
‚úÖ Step-by-step Solution
üîß Step 1: Load and play the music manually

You likely already have a SpirePatch to override the menu music. Instead of just replacing the file, you need to manually control playback and monitor the position to enforce looping.
üß† Step 2: Extract loop point metadata

You‚Äôll need to know the sample positions or time (in seconds) for the LOOP_START and LOOP_END. If you don‚Äôt have this info explicitly, you can extract it using:

    Tools like VLC, Audacity, or

    Viewing OGG metadata with a tag viewer like foobar2000

Once you know the loop times, save them (e.g., loopStart = 10.3f;, loopEnd = 42.8f;).
üß™ Step 3: Patch the update loop to manually loop

Create a SpirePatch to monitor the music time and rewind to LOOP_START when it hits LOOP_END.

Example:

@SpirePatch(
    clz = MainMenuScreen.class,
    method = "update"
)
public class MenuMusicLoopPatch {
    private static Music customMusic;
    private static float loopStart = 10.3f; // in seconds
    private static float loopEnd = 42.8f; // in seconds

    public static void Prefix(MainMenuScreen __instance) {
        if (customMusic == null) {
            customMusic = Gdx.audio.newMusic(Gdx.files.internal("audio/music/your_custom_music.ogg"));
            customMusic.setLooping(false); // Don't let libGDX loop it automatically
            customMusic.play();
        } else if (!customMusic.isPlaying()) {
            customMusic.play();
        } else if (customMusic.getPosition() >= loopEnd) {
            customMusic.setPosition(loopStart);
        }
    }
}

‚ö†Ô∏è Notes

    Accuracy: Music.setPosition(float seconds) isn't sample-perfect, but usually sufficient for smooth loops.

    Optimization: If your update patch runs every frame, you can add a tick cooldown to avoid excessive calls to getPosition(), though it‚Äôs usually lightweight.

    Multiple screens: If your music is intended for multiple screens (not just MainMenuScreen), adapt the patch to a central class like CardCrawlGame.

‚úÖ Optional: Use Sample-accurate looping with Vorbis decoder (advanced)

If you must have sample-accurate loop points, you'll need to replace libGDX's Music with a custom OGG Vorbis stream decoder, which is more complex and involves native or third-party libraries. For most mods, the getPosition() workaround is good enough.
‚úÖ Summary

Slay the Spire (libGDX) does not support LOOP_START/LOOP_END tags in .ogg files. To loop music at custom points:

    Read loop points manually (in seconds).

    Use a SpirePatch to detect playback position.

    Set position back to LOOP_START when getPosition() exceeds LOOP_END.

Let me know if you'd like help making a reusable class for music looping, or if you're targeting other parts of the game!
You said:
I plan to implement custom music in other parts of the game:
- Main Menu
- Lagavulin fight (labelled internally as "Elite Fight")
- Acts 1-4 music
- Boss music
- "Fountain" theme used for certain events and the boss chest

Can you provide a patch/code that accounts for all of these circumstances?
ChatGPT said:

Absolutely ‚Äî here's a complete solution for implementing custom music across multiple parts of Slay the Spire using loop points, with a clean and extensible architecture.
‚úÖ Goals Recap

You want to:

    Play custom .ogg music in various contexts: main menu, elite fights (e.g. Lagavulin), acts 1‚Äì4, boss fights, and the "fountain" theme.

    Support loop points (LOOP_START/LOOP_END) even though libGDX doesn‚Äôt support them natively.

    Make it modular and reusable.

‚úÖ High-Level Design

We'll create:

    CustomMusicManager: A class that:

        Loads music files

        Manages playback

        Manually loops using specified start/end times

    Patches for:

        MainMenuScreen

        AbstractMonster.takeTurn() or AbstractRoom.update() (for elite/boss fights)

        AbstractRoom.onPlayerEntry() (for room transitions, including fountain)

        CardCrawlGame.update() (general fallback)

We'll use SpirePatch and SpireInsertPatch to hook into the game flow.
üõ†Ô∏è 1. CustomMusicManager.java

public class CustomMusicManager {
    private static Music currentMusic;
    private static float loopStart = 0f;
    private static float loopEnd = -1f;
    private static String lastTrack = "";

    public static void play(String filePath, float start, float end) {
        if (lastTrack.equals(filePath) && currentMusic != null) return;

        stop();

        currentMusic = Gdx.audio.newMusic(Gdx.files.internal(filePath));
        loopStart = start;
        loopEnd = end;
        lastTrack = filePath;

        currentMusic.setLooping(false); // we loop manually
        currentMusic.play();
    }

    public static void update() {
        if (currentMusic != null && currentMusic.isPlaying()) {
            if (loopEnd > 0 && currentMusic.getPosition() >= loopEnd) {
                currentMusic.setPosition(loopStart);
            }
        }
    }

    public static void stop() {
        if (currentMusic != null) {
            currentMusic.stop();
            currentMusic.dispose();
            currentMusic = null;
            lastTrack = "";
        }
    }
}

üõ†Ô∏è 2. Global update patch (so loop logic runs every frame)

@SpirePatch(
    clz = CardCrawlGame.class,
    method = "update"
)
public class GlobalMusicUpdatePatch {
    public static void Prefix(CardCrawlGame __instance) {
        CustomMusicManager.update();
    }
}

üõ†Ô∏è 3. Main Menu Music Patch

@SpirePatch(
    clz = MainMenuScreen.class,
    method = SpirePatch.CONSTRUCTOR
)
public class MainMenuMusicPatch {
    public static void Postfix(MainMenuScreen __instance) {
        CustomMusicManager.play("audio/music/custom_menu.ogg", 10f, 42f);
    }
}

üõ†Ô∏è 4. Act Music Patch

@SpirePatch(
    clz = AbstractRoom.class,
    method = "onPlayerEntry"
)
public class ActMusicPatch {
    public static void Postfix(AbstractRoom __instance) {
        if (AbstractDungeon.actNum == 1) {
            CustomMusicManager.play("audio/music/act1_custom.ogg", 8f, 45f);
        } else if (AbstractDungeon.actNum == 2) {
            CustomMusicManager.play("audio/music/act2_custom.ogg", 10f, 50f);
        } else if (AbstractDungeon.actNum == 3) {
            CustomMusicManager.play("audio/music/act3_custom.ogg", 12f, 55f);
        } else if (AbstractDungeon.actNum == 4) {
            CustomMusicManager.play("audio/music/act4_custom.ogg", 14f, 60f);
        }
    }
}

üõ†Ô∏è 5. Elite Fight Patch

@SpirePatch(
    clz = MonsterRoomElite.class,
    method = "onPlayerEntry"
)
public class EliteMusicPatch {
    public static void Postfix(MonsterRoomElite __instance) {
        CustomMusicManager.play("audio/music/elite_custom.ogg", 5f, 35f);
    }
}

üõ†Ô∏è 6. Boss Music Patch

@SpirePatch(
    clz = MonsterRoomBoss.class,
    method = "onPlayerEntry"
)
public class BossMusicPatch {
    public static void Postfix(MonsterRoomBoss __instance) {
        CustomMusicManager.play("audio/music/boss_custom.ogg", 15f, 55f);
    }
}

üõ†Ô∏è 7. Fountain Room / Chest Room Patch

@SpirePatch(
    clz = EventRoom.class,
    method = "onPlayerEntry"
)
public class FountainMusicPatch {
    public static void Postfix(EventRoom __instance) {
        if (__instance.event instanceof FountainOfCurseRemoval || __instance.event.getClass().getSimpleName().contains("Fountain")) {
            CustomMusicManager.play("audio/music/fountain_custom.ogg", 5f, 30f);
        }
    }
}

@SpirePatch(
    clz = TreasureRoomBoss.class,
    method = "onPlayerEntry"
)
public class BossChestMusicPatch {
    public static void Postfix(TreasureRoomBoss __instance) {
        CustomMusicManager.play("audio/music/fountain_custom.ogg", 5f, 30f);
    }
}

üì¶ File Locations

Place your .ogg files in:

resources/audio/music/

And reference them like:

"audio/music/act1_custom.ogg"

üß™ Testing Tips

    Use Dev Console or downfall mod's room jump features to test room transitions quickly.

    Log positions using Gdx.app.log("Music", "Position: " + currentMusic.getPosition()); if needed.

    For seamless looping, make sure audio files are exported properly (you can use Audacity to find sample-accurate loops and export as OGG with metadata stripped out).

‚úÖ Summary

You now have:

    A modular CustomMusicManager with manual loop handling

    Patches for all relevant game areas: menu, acts, elite fights, bosses, fountain/chest

    Loop points respected using getPosition() and setPosition()

Let me know if you want:

    Config-driven setup (e.g., reading loop points from a JSON)

    Sound effect replacements

    Music fade-in/out transitions

Would you like this packaged into a reusable utility mod template?

Yes.



Great! Let's package this into a reusable utility mod template for Slay the Spire that handles custom music with manual loop points. This will include:
üéµ Slay the Spire Custom Music Mod Template
‚úÖ Features

    Plays custom .ogg music per game screen/room.

    Supports custom loop points (LOOP_START, LOOP_END) manually.

    Easily extendable for more rooms or situations.

    Keeps your main mod clean ‚Äî separation of utility logic.

    JSON-configurable if you want dynamic loop point control (optional, later).

üìÅ File Structure

YourMod/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ yourmod/
‚îÇ       ‚îú‚îÄ‚îÄ CustomMusicManager.java
‚îÇ       ‚îú‚îÄ‚îÄ patches/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ GlobalMusicUpdatePatch.java
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ MainMenuMusicPatch.java
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ActMusicPatch.java
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ EliteMusicPatch.java
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ BossMusicPatch.java
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ FountainMusicPatch.java
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ BossChestMusicPatch.java
‚îú‚îÄ‚îÄ resources/
‚îÇ   ‚îú‚îÄ‚îÄ audio/music/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ custom_menu.ogg
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ act1_custom.ogg
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ act2_custom.ogg
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ act3_custom.ogg
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ act4_custom.ogg
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ elite_custom.ogg
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ boss_custom.ogg
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ fountain_custom.ogg
‚îÇ   ‚îî‚îÄ‚îÄ mod.json

‚úÖ Step-by-Step Code Guide
üîß CustomMusicManager.java

Put this in yourmod/CustomMusicManager.java:

package yourmod;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.audio.Music;

public class CustomMusicManager {
    private static Music currentMusic;
    private static float loopStart = 0f;
    private static float loopEnd = -1f;
    private static String lastTrack = "";

    public static void play(String filePath, float start, float end) {
        if (lastTrack.equals(filePath) && currentMusic != null) return;

        stop();

        currentMusic = Gdx.audio.newMusic(Gdx.files.internal(filePath));
        loopStart = start;
        loopEnd = end;
        lastTrack = filePath;

        currentMusic.setLooping(false);
        currentMusic.play();
    }

    public static void update() {
        if (currentMusic != null && currentMusic.isPlaying()) {
            if (loopEnd > 0 && currentMusic.getPosition() >= loopEnd) {
                currentMusic.setPosition(loopStart);
            }
        }
    }

    public static void stop() {
        if (currentMusic != null) {
            currentMusic.stop();
            currentMusic.dispose();
            currentMusic = null;
            lastTrack = "";
        }
    }
}

üì¶ Patches (Put these in yourmod/patches/)

All patches follow the same logic. Here's how to write one ‚Äî for example:
üß© MainMenuMusicPatch.java

package yourmod.patches;

import basemod.interfaces.PostInitializeSubscriber;
import com.evacipated.cardcrawl.modthespire.lib.SpirePatch;
import com.megacrit.cardcrawl.screens.mainMenu.MainMenuScreen;
import yourmod.CustomMusicManager;

@SpirePatch(clz = MainMenuScreen.class, method = SpirePatch.CONSTRUCTOR)
public class MainMenuMusicPatch {
    public static void Postfix(MainMenuScreen __instance) {
        CustomMusicManager.play("audio/music/custom_menu.ogg", 10f, 42f);
    }
}

Repeat similarly for each:
üß© ActMusicPatch.java

package yourmod.patches;

import com.evacipated.cardcrawl.modthespire.lib.SpirePatch;
import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
import com.megacrit.cardcrawl.rooms.AbstractRoom;
import yourmod.CustomMusicManager;

@SpirePatch(clz = AbstractRoom.class, method = "onPlayerEntry")
public class ActMusicPatch {
    public static void Postfix(AbstractRoom __instance) {
        switch (AbstractDungeon.actNum) {
            case 1:
                CustomMusicManager.play("audio/music/act1_custom.ogg", 8f, 45f); break;
            case 2:
                CustomMusicManager.play("audio/music/act2_custom.ogg", 10f, 50f); break;
            case 3:
                CustomMusicManager.play("audio/music/act3_custom.ogg", 12f, 55f); break;
            case 4:
                CustomMusicManager.play("audio/music/act4_custom.ogg", 14f, 60f); break;
        }
    }
}

üß© EliteMusicPatch.java

@SpirePatch(clz = com.megacrit.cardcrawl.rooms.MonsterRoomElite.class, method = "onPlayerEntry")
public class EliteMusicPatch {
    public static void Postfix(Object __instance) {
        CustomMusicManager.play("audio/music/elite_custom.ogg", 5f, 35f);
    }
}

üß© BossMusicPatch.java

@SpirePatch(clz = com.megacrit.cardcrawl.rooms.MonsterRoomBoss.class, method = "onPlayerEntry")
public class BossMusicPatch {
    public static void Postfix(Object __instance) {
        CustomMusicManager.play("audio/music/boss_custom.ogg", 15f, 55f);
    }
}

üß© FountainMusicPatch.java

@SpirePatch(clz = com.megacrit.cardcrawl.rooms.EventRoom.class, method = "onPlayerEntry")
public class FountainMusicPatch {
    public static void Postfix(com.megacrit.cardcrawl.rooms.EventRoom __instance) {
        if (__instance.event.getClass().getSimpleName().contains("Fountain")) {
            CustomMusicManager.play("audio/music/fountain_custom.ogg", 5f, 30f);
        }
    }
}

üß© BossChestMusicPatch.java

@SpirePatch(clz = com.megacrit.cardcrawl.rooms.TreasureRoomBoss.class, method = "onPlayerEntry")
public class BossChestMusicPatch {
    public static void Postfix(Object __instance) {
        CustomMusicManager.play("audio/music/fountain_custom.ogg", 5f, 30f);
    }
}

üß© GlobalMusicUpdatePatch.java

@SpirePatch(clz = com.megacrit.cardcrawl.core.CardCrawlGame.class, method = "update")
public class GlobalMusicUpdatePatch {
    public static void Prefix(Object __instance) {
        yourmod.CustomMusicManager.update();
    }
}

üß∞ Optional: Fade Support / JSON Configuration

If you want a fade-in/out system, or JSON-based music definitions (e.g., music_config.json with loop times), I can provide that too. Just ask!
‚úÖ Integration with Your Mod

In your main mod initializer (e.g., YourMod.java):

@SpireInitializer
public class YourMod implements PostInitializeSubscriber {
    public YourMod() {
        BaseMod.subscribe(this);
    }

    public static void initialize() {
        new YourMod();
    }

    @Override
    public void receivePostInitialize() {
        // Optional: load custom strings or add UI if needed
    }
}

‚úÖ Final Notes

    Music playback is exclusive: only one music track plays at a time.

    You don‚Äôt need to stop music manually when rooms change; just call play() again.

    .ogg files must be valid, and best exported without metadata or with precise loop trimming.

    Use Audacity to measure sample-exact loop points.

Would you like:

    A GitHub-ready version of this mod?

    JSON-based external config (for easier editing without recompiling)?

    Music fade transitions between areas?

Let me know, and I can generate or upload templates for those too.


Use this to identify specific bosses.

@SpirePatch(clz = MonsterRoomBoss.class, method = "onPlayerEntry")
public class BossMusicPatch {
    public static void Postfix(MonsterRoomBoss __instance) {
        // Get the first boss monster from the room
        if (AbstractDungeon.getMonsters() == null || AbstractDungeon.getMonsters().monsters == null) {
            return;
        }

        for (AbstractMonster m : AbstractDungeon.getMonsters().monsters) {
            if (m != null) {
                String bossID = m.id;

                switch (bossID) {
                    case "TheGuardian":
                        CustomMusicManager.play("audio/music/boss_guardian.ogg", 10f, 45f);
                        return;
                    case "Hexaghost":
                        CustomMusicManager.play("audio/music/boss_hexaghost.ogg", 12f, 48f);
                        return;
                    case "SlimeBoss":
                        CustomMusicManager.play("audio/music/boss_slime.ogg", 11f, 43f);
                        return;
                    case "Champ":
                        CustomMusicManager.play("audio/music/boss_champ.ogg", 14f, 50f);
                        return;
                    case "Collector":
                        CustomMusicManager.play("audio/music/boss_collector.ogg", 15f, 52f);
                        return;
                    case "Automaton":
                        CustomMusicManager.play("audio/music/boss_automaton.ogg", 13f, 47f);
                        return;
                    case "AwakenedOne":
                        CustomMusicManager.play("audio/music/boss_awakened.ogg", 16f, 55f);
                        return;
                    case "TimeEater":
                        CustomMusicManager.play("audio/music/boss_timeeater.ogg", 12f, 44f);
                        return;
                    case "Donu and Deca":
                        CustomMusicManager.play("audio/music/boss_donu_deca.ogg", 10f, 42f);
                        return;
                }

                // If no match found, fall back to generic boss music
                CustomMusicManager.play("audio/music/boss_default.ogg", 10f, 45f);
                return;
            }
        }
    }
}


‚úÖ Goals

    Support multiple "soundtracks" (e.g., Classic, Remix, Custom).

    Store track info (file paths + loop points) in an external file.

    Let the user choose the soundtrack via mod settings.

    Dynamically load and use the selected soundtrack's data during gameplay.

This is a clean and maintainable approach, and I'll walk you through it.
üß† Strategy Overview

We‚Äôll do this by:
Component	Role
music_config.json	Stores all loop point and file path data, grouped by soundtrack name
CustomMusicManager	Uses this JSON to load the right track and loop points
Mod settings menu	Lets user choose soundtrack, stored in ModSettings.json
SoundtrackLoader	Loads the config once and gives easy access
üóÉÔ∏è Step 1: JSON Config Format

Create a file in resources/music_config.json:

{
  "Classic": {
    "main_menu": { "file": "audio/music/classic/menu.ogg", "start": 10.0, "end": 42.0 },
    "act1": { "file": "audio/music/classic/act1.ogg", "start": 8.0, "end": 45.0 },
    "elite": { "file": "audio/music/classic/elite.ogg", "start": 5.0, "end": 35.0 },
    "boss_hexaghost": { "file": "audio/music/classic/boss_hexaghost.ogg", "start": 12.0, "end": 48.0 },
    ...
  },
  "Remix": {
    "main_menu": { "file": "audio/music/remix/menu.ogg", "start": 12.0, "end": 41.5 },
    "act1": { "file": "audio/music/remix/act1.ogg", "start": 9.0, "end": 46.0 },
    "elite": { "file": "audio/music/remix/elite.ogg", "start": 6.5, "end": 36.5 },
    "boss_hexaghost": { "file": "audio/music/remix/boss_hexaghost.ogg", "start": 14.0, "end": 49.0 },
    ...
  }
}

üß± Step 2: SoundtrackLoader.java

Load and access JSON data:

package yourmod;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.Map;

public class SoundtrackLoader {
    public static class TrackInfo {
        public String file;
        public float start;
        public float end;
    }

    private static Map<String, Map<String, TrackInfo>> config;
    private static String selectedSoundtrack = "Classic";

    public static void load(String selectedTrack) {
        selectedSoundtrack = selectedTrack;

        try {
            FileHandle handle = Gdx.files.internal("music_config.json");
            String json = handle.readString();
            Type type = new TypeToken<Map<String, Map<String, TrackInfo>>>() {}.getType();
            config = new Gson().fromJson(json, type);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static TrackInfo get(String key) {
        if (config == null) load(selectedSoundtrack);

        Map<String, TrackInfo> soundtrack = config.getOrDefault(selectedSoundtrack, config.get("Classic"));
        return soundtrack.get(key);
    }

    public static void setSoundtrack(String name) {
        selectedSoundtrack = name;
        load(name);
    }

    public static String getCurrentSoundtrack() {
        return selectedSoundtrack;
    }
}

üéµ Step 3: Modify CustomMusicManager.java to use SoundtrackLoader

public class CustomMusicManager {
    private static Music currentMusic;
    private static float loopStart = 0f;
    private static float loopEnd = -1f;
    private static String lastTrack = "";

    public static void playByKey(String key) {
        SoundtrackLoader.TrackInfo info = SoundtrackLoader.get(key);
        if (info == null) return;

        if (lastTrack.equals(info.file) && currentMusic != null) return;

        stop();

        currentMusic = Gdx.audio.newMusic(Gdx.files.internal(info.file));
        loopStart = info.start;
        loopEnd = info.end;
        lastTrack = info.file;

        currentMusic.setLooping(false);
        currentMusic.play();
    }

    public static void update() {
        if (currentMusic != null && currentMusic.isPlaying()) {
            if (loopEnd > 0 && currentMusic.getPosition() >= loopEnd) {
                currentMusic.setPosition(loopStart);
            }
        }
    }

    public static void stop() {
        if (currentMusic != null) {
            currentMusic.stop();
            currentMusic.dispose();
            currentMusic = null;
            lastTrack = "";
        }
    }
}

üß© Step 4: Patch Example Using Soundtrack Key

Main Menu Patch:

@SpirePatch(clz = MainMenuScreen.class, method = SpirePatch.CONSTRUCTOR)
public class MainMenuMusicPatch {
    public static void Postfix(MainMenuScreen __instance) {
        CustomMusicManager.playByKey("main_menu");
    }
}

Boss Music Patch:

@SpirePatch(clz = MonsterRoomBoss.class, method = "onPlayerEntry")
public class BossMusicPatch {
    public static void Postfix(MonsterRoomBoss __instance) {
        for (AbstractMonster m : AbstractDungeon.getMonsters().monsters) {
            if (m != null) {
                String key = "boss_" + m.id;
                CustomMusicManager.playByKey(key);
                return;
            }
        }
    }
}

üß∞ Step 5: Mod Settings Support

You're already familiar with mod settings ‚Äî here's how to hook it up:

ModPanel settingsPanel = new ModPanel();

// Add a dropdown or slider to pick soundtrack
String[] options = new String[] { "Classic", "Remix", "Custom" };
ModLabeledToggle soundtrackSelector = new ModLabeledToggle("Soundtrack: ", 350f, 700f, Settings.CREAM_COLOR,
    FontHelper.tipBodyFont, SoundtrackLoader.getCurrentSoundtrack().equals("Remix"), settingsPanel, (label) -> {}, (toggle) -> {
        String selected = toggle.enabled ? "Remix" : "Classic";
        SoundtrackLoader.setSoundtrack(selected);
        ModConfig.get().putString("yourmod", "selectedSoundtrack", selected);
        ModConfig.save();
    });

settingsPanel.addUIElement(soundtrackSelector);
BaseMod.registerModBadge(null, "Your Mod", "Your Name", "Custom music mod", settingsPanel);

Then on mod init, you load:

String saved = ModConfig.get().getString("yourmod", "selectedSoundtrack", "Classic");
SoundtrackLoader.setSoundtrack(saved);
